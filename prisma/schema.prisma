generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model public_book {
  id       Int    @id @default(autoincrement())
  title    String @db.VarChar(100)
  link     String @db.VarChar(100)
  photo    String @db.VarChar(100)
  descBook String @db.VarChar(50)
}

model store_book {
  id                  Int                   @id @default(autoincrement())
  title               String                @db.VarChar(255)
  descBook            String                @db.VarChar(100)
  photo               String                @db.VarChar(200)
  summary             String                @db.Text
  ibsn                String?               @db.VarChar(50)
  pageQuant           String                @db.VarChar(30)
  tags                String                @db.VarChar(255)
  width               String                @db.VarChar(50)
  price               Decimal?              @db.Decimal(10, 2)
  store_books_credits store_books_credits[]
}

model store_books_credits {
  id            Int         @id @default(autoincrement())
  store_book_id Int?
  type          String      @db.VarChar(100)
  person        String      @db.VarChar(100)
  store_book    store_book? @relation(fields: [store_book_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "store_books_credits_ibfk_1")

  @@index([store_book_id], map: "store_book_id")
}

model user_cd {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(100)
  email        String    @unique @db.VarChar(100)
  passwordUser String    @db.VarChar(255)
  isVerified   Boolean
  createdAt    DateTime? @default(now())
  token        String?   @db.Text
  cart         cart?
  purchase     Purchase[]
}

model cart {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  totalPrice Decimal? @db.Decimal(10, 2)
  emailUser  String   @db.VarChar(100)
  user_cd    user_cd  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cart_ibfk_1")
  item       item[]

  @@index([userId], map: "userId")
}

model item {
  id     Int    @id    @default(autoincrement())
  cartId Int
  userId Int
  name   String @db.VarChar(255)
  photo  String @db.VarChar(255)
  price  Float  @db.Float
  quant  Int
  cart   cart   @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "item_ibfk_1")

  @@unique([cartId, name], map: "cartId")
}

model Purchase {
  id           Int      @id @default(autoincrement())
  userId       Int
  buyerName    String   @db.VarChar(255)
  buyerAddress String   @db.Text
  buyerCPF     String   @db.VarChar(11)
  totalPrice   Float
  createdAt    DateTime @default(now())

  items        PurchaseItem[]
  user_cd      user_cd  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("purchases")
}

model PurchaseItem {
  id         Int     @id @default(autoincrement())
  purchaseId Int
  name       String  @db.VarChar(255)
  photo      String  @db.VarChar(255)
  price      Float
  quant      Int

  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@map("purchase_items")
}
